buildscript {
    repositories {
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath("io.spring.gradle:propdeps-plugin:0.0.8")
        classpath("io.spring.gradle:docbook-reference-plugin:0.3.1")
        classpath("org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.16")
        classpath("org.asciidoctor:asciidoctorj-epub3:1.5.0-alpha.7")
    }
}

// 3rd party plugin repositories can be configured in settings.gradle
plugins {
    id "com.gradle.build-scan" version "1.8"
    id "io.spring.dependency-management" version "1.0.3.RELEASE" apply false
    id "org.jetbrains.kotlin.jvm" version "1.2.31" apply false
    id "org.jetbrains.dokka" version "0.9.16"
    id "org.asciidoctor.convert" version "1.5.6"
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

ext {
    linkHomepage = 'https://devbhuwan.github.io/ddd'
    linkCi = 'https://travis.org/devbhuwan/ddd'
    linkIssue = 'https://github.com/devbhuwan/ddd/issues'
    linkScmUrl = 'https://github.com/devbhuwan/ddd'
    linkScmConnection = 'scm:git:git://github.com/devbhuwan/ddd.git'
    linkScmDevConnection = 'scm:git:ssh://git@github.com:devbhuwan/ddd.git'
}


configure(allprojects) { project ->
    group = "org.dddframework"
    version = qualifyVersionIfNecessary(version)

    ext.springBootVersion = "2.0.0.RELEASE"
    ext.junitJupiterVersion = "5.0.3"
    ext.junitPlatformVersion = "1.0.3"
    ext.junitVintageVersion = "4.12.3"
    ext.kotlinVersion = "1.2.31"
    ext.gradleScriptDir = "${rootProject.projectDir}/gradle"

    apply plugin: "propdeps"
    apply plugin: "java"
    apply from: "${gradleScriptDir}/ide.gradle"

    apply plugin: "kotlin"
    compileKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
            freeCompilerArgs = ["-Xjsr305=strict"]
            apiVersion = "1.1"
            languageVersion = "1.1"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
            freeCompilerArgs = ["-Xjsr305=strict"]
        }
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    def commonCompilerArgs =
            ["-Xlint:serial", "-Xlint:cast", "-Xlint:classfile", "-Xlint:dep-ann",
             "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally", "-Xlint:overrides",
             "-Xlint:path", "-Xlint:processing", "-Xlint:static", "-Xlint:try", "-Xlint:-options"]

    compileJava.options*.compilerArgs = commonCompilerArgs +
            ["-Xlint:varargs", "-Xlint:fallthrough", "-Xlint:rawtypes",
             "-Xlint:deprecation", "-Xlint:unchecked", "-Werror"]

    compileTestJava.options*.compilerArgs = commonCompilerArgs +
            ["-Xlint:-varargs", "-Xlint:-fallthrough", "-Xlint:-rawtypes",
             "-Xlint:-deprecation", "-Xlint:-unchecked"]

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
        options.compilerArgs += "-parameters"
    }

    repositories {
        maven { url "https://repo.spring.io/libs-release" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/snapshot" }
    }

    dependencies {
        testCompile("junit:junit:4.12") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
        testCompile("org.mockito:mockito-core:2.12.0") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
        testCompile("com.nhaarman:mockito-kotlin:1.5.0") {
            exclude module: 'kotlin-stdlib'
            exclude module: 'kotlin-reflect'
            exclude module: 'mockito-core'
        }
        testCompile("org.hamcrest:hamcrest-all:1.3")
        testCompile("org.xmlunit:xmlunit-matchers:2.3.0")
        // JSR-305 only used for non-required meta-annotations
        compileOnly("com.google.code.findbugs:jsr305:3.0.2")
        testCompileOnly("com.google.code.findbugs:jsr305:3.0.2")
    }

}

def qualifyVersionIfNecessary(version) {
    if (rootProject.hasProperty("BRANCH_NAME")) {
        def qualifier = rootProject.getProperty("BRANCH_NAME")
        if (qualifier.startsWith("DDD-")) {
            return version.replace('BUILD', qualifier)
        }
    }
    return version
}